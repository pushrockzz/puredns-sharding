name: puredns-quick-test

on:
  workflow_dispatch:
    inputs:
      chunk_start:
        description: 'First chunk index this run will process (integer)'
        required: true
        default: '0'
      total_chunks:
        description: 'DEPRECATED: Total chunks is now auto-detected.'
        required: false
        default: '8'
      run_counter:
        description: 'Automatic run counter for recursion (auto-incremented)'
        required: false
        default: '0'
      max_runs:
        description: 'Safety cap: stop after this many runs. If unset, it is auto-calculated to finish all chunks.'
        required: false
        default: '999' # High default acts as "no limit"
      words_per_chunk:
        description: 'Words to generate per chunk (test default = 500)'
        required: false
        default: '500'
      domains_count:
        description: 'How many test domains to generate (default = 10)'
        required: false
        default: '10'

env:
  WORKFLOW_FILE: puredns-quicktest.yml
  MATRIX_SIZE: '4'

jobs:
  prepare:
    name: prepare-wordlists-and-resolvers
    runs-on: ubuntu-latest
    outputs:
      artifact-name: wordlists-artifact
      total-chunks: ${{ steps.create_inputs.outputs.total-chunks }}
      effective-max-runs: ${{ steps.create_inputs.outputs.effective-max-runs }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Ensure directories and create/gather wordlist, domains
        id: create_inputs
        run: |
          ensure_dir() {
            dir="$1"
            if [ -e "$dir" ]; then
              if [ -d "$dir" ]; then return 0; else
                timestamp=$(date +%s)
                mv "$dir" "${dir}.bak.${timestamp}"
                echo "Moved file '$dir' to '${dir}.bak.${timestamp}'"
              fi
            fi
            mkdir -p "$dir"
          }
          ensure_dir domains; ensure_dir wordlists; ensure_dir results
          DOMAIN_FILE="domains/domains.txt"
          if [ ! -f "$DOMAIN_FILE" ]; then
            echo "Generating ${{ github.event.inputs.domains_count }} test domains into $DOMAIN_FILE"
            for i in $(seq 1 "${{ github.event.inputs.domains_count }}"); do echo "test${i}.example.com"; done > "$DOMAIN_FILE"
          fi
          WORDLIST="wordlist.txt"
          if [ ! -f "$WORDLIST" ]; then
            TOTAL_CHUNKS="${{ github.event.inputs.total_chunks }}"
            WORDS_PER_CHUNK="${{ github.event.inputs.words_per_chunk }}"
            TOTAL_WORDS=$(( TOTAL_CHUNKS * WORDS_PER_CHUNK ))
            echo "Generating quick-test wordlist with $TOTAL_WORDS words into $WORDLIST"
            for n in $(seq 1 $TOTAL_WORDS); do echo "w${n}"; done > "$WORDLIST"
          fi
          CHUNK_LINES="${{ github.event.inputs.words_per_chunk }}"
          rm -f wordlists/chunk-*.txt || true
          split -l "${CHUNK_LINES}" -d -a 5 --additional-suffix=.txt "$WORDLIST" wordlists/chunk-
          RESOLVERS_FILE="resolvers.txt"
          RES_URL="https://raw.githubusercontent.com/and0x00/resolvers.txt/main/resolvers.txt"
          wget -qO "$RESOLVERS_FILE" "$RES_URL" || (echo "Failed to download resolvers; creating minimal fallback" && printf '1.1.1.1\n8.8.8.8\n9.9.9.9\n' > "$RESOLVERS_FILE")
          CHUNK_COUNT=$(ls -1 wordlists/chunk-*.txt | wc -l)
          echo "Discovered ${CHUNK_COUNT} actual chunk files."
          echo "total-chunks=${CHUNK_COUNT}" >> $GITHUB_OUTPUT
          MATRIX_SIZE=${{ env.MATRIX_SIZE }}
          CALCULATED_RUNS=$(( (CHUNK_COUNT + MATRIX_SIZE - 1) / MATRIX_SIZE ))
          USER_MAX_RUNS=${{ github.event.inputs.max_runs }}
          EFFECTIVE_MAX_RUNS=$(( CALCULATED_RUNS < USER_MAX_RUNS ? CALCULATED_RUNS : USER_MAX_RUNS ))
          echo "Effective max_runs for this job: ${EFFECTIVE_MAX_RUNS}"
          echo "effective-max-runs=${EFFECTIVE_MAX_RUNS}" >> $GITHUB_OUTPUT

      - name: Upload wordlists + resolvers + domains as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wordlists-artifact
          path: |
            wordlists
            resolvers.txt
            domains/domains.txt

  brute:
    name: bruteforce-shard (shard ${{ matrix.shard }})
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        shard: [0,1,2,3]
    steps:
      - name: Checkout repo (no credentials)
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download pre-split wordlists/artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.artifact-name }}
          path: .

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules & binaries
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
          key: ${{ runner.os }}-go-cache-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-go-cache-

      - name: Install massdns
        run: |
          git clone https://github.com/blechschmidt/massdns.git
          cd massdns; make; sudo make install; cd ..

      - name: Install puredns and utilities
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq ca-certificates curl wget
          go install github.com/d3mondev/puredns/v2@latest

      - name: Compute local chunk file for this shard
        id: vars
        run: |
          SHARD=${{ matrix.shard }}
          CHUNK_START=${{ github.event.inputs.chunk_start }}
          CHUNK_INDEX=$(( CHUNK_START + SHARD ))
          CHUNK_FILE="wordlists/chunk-$(printf '%05d' "$CHUNK_INDEX").txt"
          if [ ! -f "$CHUNK_FILE" ]; then
            echo "chunk_missing=true" >> $GITHUB_OUTPUT
            echo "INFO: No chunk file at '${CHUNK_FILE}'. This is expected for shards on the final run."
          else
            echo "chunk_missing=false" >> $GITHUB_OUTPUT
            echo "Using chunk: $CHUNK_FILE"
          fi

      - name: Run puredns and organize results by domain
        if: steps.vars.outputs.chunk_missing == 'false'
        run: |
          CHUNK_FILE="wordlists/chunk-$(printf '%05d' "$(( ${{ github.event.inputs.chunk_start }} + ${{ matrix.shard }} ))").txt"
          DOMAIN_FILE="domains/domains.txt"
          RESOLVERS="resolvers.txt"
          CHUNK_INDEX=$(( ${{ github.event.inputs.chunk_start }} + ${{ matrix.shard }} ))
          while IFS= read -r domain || [ -n "$domain" ]; do
            case "$domain" in \#*|"") continue ;; esac
            ROOT_DOMAIN_DIR="results/$domain"
            mkdir -p "$ROOT_DOMAIN_DIR"
            PUREDNS_FILE="${ROOT_DOMAIN_DIR}/shard-${CHUNK_INDEX}.txt"
            echo "[shard $CHUNK_INDEX] bruteforcing $domain, outputting to $PUREDNS_FILE"
            cat "$CHUNK_FILE" | puredns bruteforce "$domain" -r "$RESOLVERS" --rate-limit 5000 --skip-validation \
              --wildcard-tests 300 --wildcard-batch 100000 --write "$PUREDNS_FILE" --quiet
          done < "$DOMAIN_FILE"

      - name: (Optional) Commit results back to repo
        if: env.PAT_TOKEN != ''
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          CHUNK_INDEX=$(( ${{ github.event.inputs.chunk_start }} + ${{ matrix.shard }} ))
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}"
          git add results/
          if git diff --staged --quiet; then
            echo "No new results to commit for shard ${CHUNK_INDEX}"
          else
            git commit -m "Add puredns results: shard ${CHUNK_INDEX}"
            for try in 1 2 3; do
              if git pull --rebase --autostash origin ${{ github.ref_name }} && git push origin HEAD:${{ github.ref_name }}; then
                echo "Pushed results for shard ${CHUNK_INDEX}"; break
              fi
              echo "Push attempt $try failed; retrying..."
              sleep $((try * 2))
            done
          fi

  dispatch-next:
    name: dispatch-next-run
    runs-on: ubuntu-latest
    needs: [prepare, brute]
    if: always()
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Compute and dispatch next run
        run: |
          if [ -z "${PAT_TOKEN}" ]; then echo "Error: secrets.PAT_TOKEN is required." >&2; exit 1; fi
          CHUNK_START=${{ github.event.inputs.chunk_start }}
          TOTAL_CHUNKS=${{ needs.prepare.outputs.total-chunks }}
          RUN_COUNTER=${{ github.event.inputs.run_counter }}
          MAX_RUNS=${{ needs.prepare.outputs.effective-max-runs }}
          MATRIX_SIZE=${{ env.MATRIX_SIZE }}
          NEXT_START=$((CHUNK_START + MATRIX_SIZE))
          NEXT_COUNTER=$((RUN_COUNTER + 1))
          echo "Current start: ${CHUNK_START}, Next start: ${NEXT_START}, Total chunks: ${TOTAL_CHUNKS}, Run counter: ${RUN_COUNTER}, Effective max runs: ${MAX_RUNS}"
          if [ "$NEXT_START" -ge "$TOTAL_CHUNKS" ]; then echo "All chunks processed. Terminating recursion."; exit 0; fi
          if [ "${NEXT_COUNTER}" -ge "${MAX_RUNS}" ]; then echo "Next run would exceed max_runs limit. Terminating recursion."; exit 0; fi
          URL="https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.WORKFLOW_FILE }}/dispatches"
          BODY=$(printf '{"ref":"%s","inputs":{"chunk_start":"%s","total_chunks":"%s","run_counter":"%s","max_runs":"%s","words_per_chunk":"%s","domains_count":"%s"}}' \
            "${{ github.ref_name }}" "${NEXT_START}" "${TOTAL_CHUNKS}" "${NEXT_COUNTER}" "${MAX_RUNS}" \
            "${{ github.event.inputs.words_per_chunk }}" "${{ github.event.inputs.domains_count }}")
          echo "Dispatching next run..."
          for i in 1 2 3 4; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${PAT_TOKEN}" -H "X-GitHub-Api-Version: 2022-11-28" -d "$BODY" "$URL")
            if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then echo "Dispatch succeeded (HTTP ${HTTP_STATUS})"; exit 0; fi
            echo "Dispatch attempt ${i} failed (HTTP ${HTTP_STATUS}). Retrying..."
            sleep $((i * 2))
          done
          echo "Failed to dispatch next run after retries. Terminating with an error."
          exit 0
