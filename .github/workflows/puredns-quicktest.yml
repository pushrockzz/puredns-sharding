name: puredns-quick-test

on:
  workflow_dispatch:
    inputs:
      chunk_start:
        description: 'First chunk index this run will process (integer)'
        required: true
        default: '0'
      total_chunks:
        description: 'DEPRECATED: Total chunks is now auto-detected.'
        required: false
        default: '8'
      run_counter:
        description: 'Automatic run counter for recursion (auto-incremented)'
        required: false
        default: '0'
      max_runs:
        description: 'Safety cap: stop after this many runs. If unset, it is auto-calculated to finish all chunks.'
        required: false
        default: '999' # High default acts as "no limit"
      words_per_chunk:
        description: 'Words per chunk file (lines_per_chunk).'
        required: false
        default: '50000'
      domains_count:
        description: 'How many test domains to generate (default = 5)'
        required: false
        default: '5'

env:
  WORKFLOW_FILE: puredns-quicktest.yml
  MATRIX_SIZE: '20'
  
jobs:
  prepare:
    name: prepare-wordlists-and-resolvers
    runs-on: ubuntu-latest
    env:
      COMBINED_WORDLIST: combined-wordlist.txt
    outputs:
      artifact-name: wordlists-artifact
      total-chunks: ${{ steps.finalize_prep.outputs.total-chunks }}
      effective-max-runs: ${{ steps.finalize_prep.outputs.effective-max-runs }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install Go tools
        run: go install -v github.com/tomnomnom/anew@latest

      - name: Cache Raw Wordlists
        uses: actions/cache@v3
        with:
          path: |
            best-wordlist-level1.txt
            best-wordlist-level2.txt
          key: raw-wordlists-cache-v1-${{ runner.os }}

      - name: Fetch wordlists and Resolvers
        run: |
          if [ ! -f best-wordlist-level1.txt ]; then wget -qO best-wordlist-level1.txt https://raw.githubusercontent.com/trickest/wordlists/main/inventory/levels/level1.txt; fi
          if [ ! -f best-wordlist-level2.txt ]; then wget -qO best-wordlist-level2.txt https://raw.githubusercontent.com/trickest/wordlists/main/inventory/levels/level2.txt; fi
          # Download and combine multiple resolver lists into the one used by the brute job
          wget -qO resolvers.txt https://raw.githubusercontent.com/rix4uni/resolvers/main/resolvers.txt
          wget -qO resolvers-trusted.txt https://raw.githubusercontent.com/and0x00/resolvers.txt/main/resolvers.txt
          

      - name: Build filter_wordlist tool
        run: |
          if [ -f "filter_wordlist.go" ]; then
            go build -o filter_wordlist filter_wordlist.go
            chmod +x filter_wordlist
            echo "Successfully built filter_wordlist tool."
          else
            echo "INFO: filter_wordlist.go not found, will use raw wordlists."
          fi

      - name: Cache Filtered Wordlist
        id: cache-filtered-wordlist
        uses: actions/cache@v3
        with:
          path: ${{ env.COMBINED_WORDLIST }}
          key: filtered-wordlist-cache-v1-${{ runner.os }}-${{ hashFiles('best-wordlist-*.txt', 'filter_wordlist.go') }}

      - name: Filter and Combine Wordlists
        if: steps.cache-filtered-wordlist.outputs.cache-hit != 'true'
        run: |
          echo "INFO: Cache miss. Generating new filtered and combined wordlist."
          if [ -f ./filter_wordlist ]; then
            echo "INFO: Using custom filter_wordlist tool."
            ./filter_wordlist best-wordlist-level1.txt > best-wordlist-filtered.txt
            ./filter_wordlist best-wordlist-level2.txt > best-wordlist-level2-filtered.txt
          else
            echo "INFO: Using raw wordlists as filter tool was not found."
            cp best-wordlist-level1.txt best-wordlist-filtered.txt
            cp best-wordlist-level2.txt best-wordlist-level2-filtered.txt
          fi
          # Combine the two lists, ensuring uniqueness
          cat best-wordlist-filtered.txt best-wordlist-level2-filtered.txt | PATH=$HOME/go/bin:$PATH anew -q ${{ env.COMBINED_WORDLIST }}

      - name: Finalize Preparation and Split Chunks
        id: finalize_prep
        run: |
          mkdir -p domains wordlists results
          DOMAIN_FILE="domains/domains.txt"
          if [ ! -f "$DOMAIN_FILE" ]; then
            echo "Generating ${{ github.event.inputs.domains_count }} test domains into $DOMAIN_FILE"
            for i in $(seq 1 "${{ github.event.inputs.domains_count }}"); do echo "test${i}.example.com"; done > "$DOMAIN_FILE"
          fi
          
          echo "Splitting combined wordlist into chunks..."
          COMBINED_WORDLIST="${{ env.COMBINED_WORDLIST }}"
          if [ ! -s "$COMBINED_WORDLIST" ]; then
            echo "::error:: Combined wordlist is empty. Cannot create chunks."
            exit 0
          fi
          
          rm -f wordlists/chunk-*.txt || true
          split -l "${{ github.event.inputs.words_per_chunk }}" -d -a 5 --additional-suffix=.txt "$COMBINED_WORDLIST" wordlists/chunk-
          
          if [ -z "$(ls -A wordlists)" ]; then
            echo "::error:: Split command failed to create any chunks."
            exit 0
          fi

          CHUNK_COUNT=$(ls -1 wordlists/chunk-*.txt | wc -l)
          echo "Discovered ${CHUNK_COUNT} actual chunk files."
          echo "total-chunks=${CHUNK_COUNT}" >> $GITHUB_OUTPUT
          MATRIX_SIZE=${{ env.MATRIX_SIZE }}
          CALCULATED_RUNS=$(( (CHUNK_COUNT + MATRIX_SIZE - 1) / MATRIX_SIZE ))
          USER_MAX_RUNS=${{ github.event.inputs.max_runs }}
          EFFECTIVE_MAX_RUNS=$(( CALCULATED_RUNS < USER_MAX_RUNS ? CALCULATED_RUNS : USER_MAX_RUNS ))
          echo "Effective max_runs for this job: ${EFFECTIVE_MAX_RUNS}"
          echo "effective-max-runs=${EFFECTIVE_MAX_RUNS}" >> $GITHUB_OUTPUT

      - name: Upload wordlists + resolvers + domains as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wordlists-artifact
          path: |
            wordlists
            resolvers.txt
            resolvers-trusted.txt
            domains/domains.txt

  brute:
    # This job remains unchanged
    name: bruteforce-shard (shard ${{ matrix.shard }})
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        shard: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
    steps:
      - name: Checkout repo (no credentials)
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download pre-split wordlists/artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.artifact-name }}
          path: .

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules & binaries
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
          key: ${{ runner.os }}-go-cache-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-go-cache-

      - name: Install massdns
        run: |
          git clone https://github.com/blechschmidt/massdns.git
          cd massdns; make; sudo make install; cd ..

      - name: Install puredns and utilities
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq ca-certificates curl wget
          go install github.com/d3mondev/puredns/v2@latest

      - name: Compute local chunk file for this shard
        id: vars
        run: |
          SHARD=${{ matrix.shard }}
          CHUNK_START=${{ github.event.inputs.chunk_start }}
          CHUNK_INDEX=$(( CHUNK_START + SHARD ))
          CHUNK_FILE="wordlists/chunk-$(printf '%05d' "$CHUNK_INDEX").txt"
          if [ ! -f "$CHUNK_FILE" ]; then
            echo "chunk_missing=true" >> $GITHUB_OUTPUT
            echo "INFO: No chunk file at '${CHUNK_FILE}'. This is expected for shards on the final run."
          else
            echo "chunk_missing=false" >> $GITHUB_OUTPUT
            echo "Using chunk: $CHUNK_FILE"
          fi

      - name: Run puredns and organize results by domain
        if: steps.vars.outputs.chunk_missing == 'false'
        run: |
          CHUNK_FILE="wordlists/chunk-$(printf '%05d' "$(( ${{ github.event.inputs.chunk_start }} + ${{ matrix.shard }} ))").txt"
          DOMAIN_FILE="domains/domains.txt"
          RESOLVERS="resolvers.txt"
          RESOLVERS_TRUSTED="resolvers-trusted.txt"
          CHUNK_INDEX=$(( ${{ github.event.inputs.chunk_start }} + ${{ matrix.shard }} ))
          while IFS= read -r domain || [ -n "$domain" ]; do
            case "$domain" in \#*|"") continue ;; esac
            ROOT_DOMAIN_DIR="results/$domain"
            mkdir -p "$ROOT_DOMAIN_DIR"
            
            PUREDNS_FILE="${ROOT_DOMAIN_DIR}/shard-${CHUNK_INDEX}.txt"
            WILDCARD_FILE="${ROOT_DOMAIN_DIR}/wildcards-${CHUNK_INDEX}.txt"
            MASSDNS_FILE="${ROOT_DOMAIN_DIR}/massdns-${CHUNK_INDEX}.txt"

            echo "[shard $CHUNK_INDEX] bruteforcing $domain, outputting to $ROOT_DOMAIN_DIR/"
            cat "$CHUNK_FILE" | puredns bruteforce "$domain" -r "$RESOLVERS" --rate-limit 5000 --rate-limit-trusted 2000 \
              --resolvers-trusted "$RESOLVERS_TRUSTED"
              --wildcard-tests 300 --wildcard-batch 100000 \
              --write "$PUREDNS_FILE" \
              --write-wildcards "$WILDCARD_FILE" \
              --write-massdns "$MASSDNS_FILE" \
              --quiet
          done < "$DOMAIN_FILE"

      - name: (Optional) Commit results back to repo
       
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          CHUNK_INDEX=$(( ${{ github.event.inputs.chunk_start }} + ${{ matrix.shard }} ))
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}"
          git add results/
          if git diff --staged --quiet; then
            echo "No new results to commit for shard ${CHUNK_INDEX}"
          else
            git commit -m "Add puredns results: shard ${CHUNK_INDEX}"
            for try in 1 2 3; do
              if git pull --rebase --autostash origin ${{ github.ref_name }} && git push origin HEAD:${{ github.ref_name }}; then
                echo "Pushed results for shard ${CHUNK_INDEX}"; break
              fi
              echo "Push attempt $try failed; retrying..."
              sleep $((try * 2))
            done
          fi

  dispatch-next:
    # This job remains unchanged
    name: dispatch-next-run
    runs-on: ubuntu-latest
    needs: [prepare, brute]
    if: always()
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:
      - name: Compute and dispatch next run
        run: |
          if [ -z "${PAT_TOKEN}" ]; then echo "Error: secrets.PAT_TOKEN is required." >&2; exit 0; fi
          CHUNK_START=${{ github.event.inputs.chunk_start }}
          TOTAL_CHUNKS=${{ needs.prepare.outputs.total-chunks }}
          RUN_COUNTER=${{ github.event.inputs.run_counter }}
          MAX_RUNS=${{ needs.prepare.outputs.effective-max-runs }}
          MATRIX_SIZE=${{ env.MATRIX_SIZE }}
          NEXT_START=$((CHUNK_START + MATRIX_SIZE))
          NEXT_COUNTER=$((RUN_COUNTER + 1))
          echo "Current start: ${CHUNK_START}, Next start: ${NEXT_START}, Total chunks: ${TOTAL_CHUNKS}, Run counter: ${RUN_COUNTER}, Effective max runs: ${MAX_RUNS}"
          if [ "$NEXT_START" -ge "$TOTAL_CHUNKS" ]; then echo "All chunks processed. Terminating recursion."; exit 0; fi
          if [ "${NEXT_COUNTER}" -ge "${MAX_RUNS}" ]; then echo "Next run would exceed max_runs limit. Terminating recursion."; exit 0; fi
          URL="https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ env.WORKFLOW_FILE }}/dispatches"
          BODY=$(printf '{"ref":"%s","inputs":{"chunk_start":"%s","total_chunks":"%s","run_counter":"%s","max_runs":"%s","words_per_chunk":"%s","domains_count":"%s"}}' \
            "${{ github.ref_name }}" "${NEXT_START}" "${TOTAL_CHUNKS}" "${NEXT_COUNTER}" "${MAX_RUNS}" \
            "${{ github.event.inputs.words_per_chunk }}" "${{ github.event.inputs.domains_count }}")
          echo "Dispatching next run..."
          for i in 1 2 3 4; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${PAT_TOKEN}" -H "X-GitHub-Api-Version: 2022-11-28" -d "$BODY" "$URL")
            if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then echo "Dispatch succeeded (HTTP ${HTTP_STATUS})"; exit 0; fi
            echo "Dispatch attempt ${i} failed (HTTP ${HTTP_STATUS}). Retrying..."
            sleep $((i * 2))
          done
          echo "Failed to dispatch next run after retries. Terminating with an error."
          exit 0
