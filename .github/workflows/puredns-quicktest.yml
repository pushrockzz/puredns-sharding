name: puredns-quick-test

on:
  workflow_dispatch:
    inputs:
      chunk_start:
        description: 'First chunk index this run will process (integer)'
        required: true
        default: '0'
      total_chunks:
        description: 'Total number of wordlist chunks available (test default = 8)'
        required: true
        default: '8'
      run_counter:
        description: 'Automatic run counter for recursion (auto-incremented)'
        required: false
        default: '0'
      max_runs:
        description: 'Safety: stop after this many runs'
        required: false
        default: '10'
      words_per_chunk:
        description: 'Words to generate per chunk (test default = 100)'
        required: false
        default: '100'
      domains_count:
        description: 'How many test domains to generate (default = 10)'
        required: false
        default: '10'

env:
  WORKFLOW_FILE: puredns-quick-test.yml
  MATRIX_SIZE: '4'

# PREPARE job: runs once, splits the wordlist into chunks and uploads as artifact
jobs:
  prepare:
    name: prepare-wordlists-and-resolvers
    runs-on: ubuntu-latest
    outputs:
      artifact-name: wordlists-artifact
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Ensure directories and create/gather wordlist, domains
        id: create_inputs
        run: |

          ensure_dir() {
            dir="$1"
            if [ -e "$dir" ]; then
              if [ -d "$dir" ]; then
                # directory exists — fine
                return 0
              else
                # path exists but is a file — move it out of the way
                timestamp=$(date +%s)
                mv "$dir" "${dir}.bak.${timestamp}"
                echo "Moved file '$dir' to '${dir}.bak.${timestamp}'"
              fi
            fi
            mkdir -p "$dir"
          }          


          ensure_dir domains
          ensure_dir wordlists
          ensure_dir results

          # domains: prefer existing, otherwise generate small test list
          DOMAIN_FILE="domains/domains.txt"
          DOM_COUNT="${{ github.event.inputs.domains_count }}"
          if [ -f "$DOMAIN_FILE" ]; then
            echo "Using existing $DOMAIN_FILE"
          else
            echo "Generating $DOM_COUNT test domains into $DOMAIN_FILE"
            : > "$DOMAIN_FILE"
            i=1
            while [ $i -le "$DOM_COUNT" ]; do
              echo "test${i}.example.com" >> "$DOMAIN_FILE"
              i=$((i + 1))
            done
          fi

          # wordlist: prefer repo wordlist.txt, otherwise generate quick test wordlist
          WORDLIST="wordlist.txt"
          if [ -f "$WORDLIST" ]; then
            echo "Using existing $WORDLIST in repo"
          else
            # generate a big wordlist equal to total_chunks * words_per_chunk for deterministic split
            TOTAL_CHUNKS="${{ github.event.inputs.total_chunks }}"
            WORDS_PER_CHUNK="${{ github.event.inputs.words_per_chunk }}"
            TOTAL_WORDS=$(( TOTAL_CHUNKS * WORDS_PER_CHUNK ))
            echo "Generating quick-test wordlist with $TOTAL_WORDS words into $WORDLIST"
            : > "$WORDLIST"
            n=1
            while [ $n -le $TOTAL_WORDS ]; do
              echo "w${n}" >> "$WORDLIST"
              n=$((n + 1))
            done
          fi

          # split wordlist into chunk files: wordlists/chunk-0000.txt ...
          CHUNK_LINES="${{ github.event.inputs.words_per_chunk }}"
          # remove any old chunks (safe)
          rm -f wordlists/chunk-*.txt || true
          split -l "${CHUNK_LINES}" -d -a 4 --additional-suffix=.txt "$WORDLIST" wordlists/chunk-
          echo "Created chunk files:"
          ls -1 wordlists || true

          # Download resolvers via wget (your requested source)
          RESOLVERS_FILE="resolvers.txt"
          RES_URL="https://raw.githubusercontent.com/and0x00/resolvers.txt/main/resolvers.txt"
          echo "Downloading resolvers from ${RES_URL}"
          wget -qO "$RESOLVERS_FILE" "$RES_URL" || (echo "Failed to download resolvers; creating minimal fallback" && printf '1.1.1.1\n8.8.8.8\n9.9.9.9\n' > "$RESOLVERS_FILE")

          # Debug listing
          echo "artifact_paths=wordlists resolvers.txt domains/domains.txt" >> $GITHUB_OUTPUT

      - name: Upload wordlists + resolvers + domains as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wordlists-artifact
          path: |
            wordlists
            resolvers.txt
            domains/domains.txt

  # BRUTE job: runs per matrix shard; depends on prepare; downloads artifact with chunks
  brute:
    name: bruteforce-shard (shard ${{ matrix.shard }})
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        shard: [0,1,2,3]   # static 4-entry matrix; keep in sync with MATRIX_SIZE

    steps:
      - name: Checkout repo (no credentials)
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download pre-split wordlists/artifact
        uses: actions/download-artifact@v4
        with:
          name: wordlists-artifact
          path: .

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules & binaries
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
          key: ${{ runner.os }}-go-cache-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-go-cache-
          
      
      - name: Install massdns
        run: |
          git clone https://github.com/blechschmidt/massdns.git
          cd massdns
          make
          sudo make install
          cd ..      
      
      - name: Install puredns and utilities
        run: |
         
          sudo apt-get update -y
          sudo apt-get install -y jq ca-certificates curl wget
          go install github.com/d3mondev/puredns/v2@latest
          puredns --help


      - name: Compute local chunk file for this shard
        id: vars
        run: |
          
          SHARD=${{ matrix.shard }}
          CHUNK_START=${{ github.event.inputs.chunk_start }}
          CHUNK_INDEX=$(( CHUNK_START + SHARD ))
          CHUNK_FILE="wordlists/chunk-$(printf '%04d' "$CHUNK_INDEX").txt"
          # If split used -d with default file names chunk-00,chunk-01 with 2-digit indexes,
          # but we used -a 4 so filenames are chunk-0000.txt etc. Use same pattern as prepare.
          if [ ! -f "$CHUNK_FILE" ]; then
            echo "chunk_missing=true" >> $GITHUB_OUTPUT
            echo "chunk_file=$CHUNK_FILE" >> $GITHUB_OUTPUT
            echo "CHUNK FILE MISSING: $CHUNK_FILE" >&2
          else
            echo "chunk_missing=false" >> $GITHUB_OUTPUT
            echo "chunk_file=$CHUNK_FILE" >> $GITHUB_OUTPUT
            echo "Using chunk: $CHUNK_FILE"
          fi

      - name: Run puredns bruteforce for this shard (stdin wordlist)
        if: steps.vars.outputs.chunk_missing == 'false'
        id: run_puredns
        run: |
          set -euo pipefail

          # Ensure results is a directory. If 'results' exists but is a file, move it out of the way.
          if [ -e results ]; then
            if [ ! -d results ]; then
              echo "Path 'results' exists and is not a directory. Moving to results.file.bak.<ts>"
              mv results "results.file.bak.$(date +%s)"
            fi
          fi
          mkdir -p results

          # now safe to create files under results/
          CHUNK_FILE="${{ steps.vars.outputs.chunk_file }}"
          DOMAIN_FILE="domains/domains.txt"
          RESOLVERS="resolvers.txt"
          CHUNK_INDEX=$(( ${{ github.event.inputs.chunk_start }} + ${{ matrix.shard }} ))
          SHARD_OUT="results/shard-${CHUNK_INDEX}.txt"
          : > "$SHARD_OUT"


          while IFS= read -r domain || [ -n "$domain" ]; do
            case "$domain" in
              \#*|"") continue ;;
            esac

            SAN=$(printf '%s' "$domain" | tr '/:@' '_' | tr '.' '_')
            PUREDNS_FILE="results/puredns-${CHUNK_INDEX}-${SAN}.txt"
            WILDCARD_FILE="results/wildcards-${CHUNK_INDEX}-${SAN}.txt"
            MASSDNS_FILE="results/massdns-${CHUNK_INDEX}-${SAN}.txt"

            echo "[shard $CHUNK_INDEX] bruteforcing $domain using $CHUNK_FILE"
            # wordlist piped via stdin as requested
            cat "$CHUNK_FILE" | /usr/local/bin/puredns bruteforce "$domain" \
              -r "$RESOLVERS" \
              --rate-limit 5000 \
              --skip-validation \
              --wildcard-tests 300 \
              --wildcard-batch 100000 \
              --write "$PUREDNS_FILE" \
              --write-wildcards "$WILDCARD_FILE" \
              --write-massdns "$MASSDNS_FILE" \
              --quiet

            if [ -s "$PUREDNS_FILE" ]; then
              cat "$PUREDNS_FILE" >> "$SHARD_OUT"
            fi
          done < "$DOMAIN_FILE"

          echo "shard_out=${SHARD_OUT}" >> $GITHUB_OUTPUT

      - name: (Optional) Commit results back to repo if PAT_TOKEN present
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail
          CHUNK_START=${{ github.event.inputs.chunk_start }}
          SHARD=${{ matrix.shard }}
          CHUNK_INDEX=$(( CHUNK_START + SHARD ))
          OUTFILE="results/shard-${CHUNK_INDEX}.txt"

          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}"

          git add "$OUTFILE" || true
          if git diff --staged --quiet; then
            echo "No new results to commit for $OUTFILE"
          else
            git commit -m "Add quick-test puredns results: shard ${CHUNK_INDEX}"
            for try in 1 2 3; do
              if git pull --rebase --autostash origin ${{ github.ref_name }}; then
                if git push origin HEAD:${{ github.ref_name }}; then
                  echo "Pushed results for $OUTFILE"
                  break
                fi
              fi
              echo "Push attempt $try failed; retrying..."
              sleep $((try * 2))
            done
          fi

  dispatch-next:
    name: dispatch-next-run
    runs-on: ubuntu-latest
    needs: brute
    if: always()
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      WORKFLOW_FILE: puredns-quicktest.yml 
      MATRIX_SIZE: 4
    steps:
      - name: Compute and dispatch next run
        run: |
          set -euo pipefail
          CHUNK_START=${{ github.event.inputs.chunk_start }}
          TOTAL=${{ github.event.inputs.total_chunks }}
          RUN_COUNTER=${{ github.event.inputs.run_counter }}
          MAX_RUNS=${{ github.event.inputs.max_runs }}
          WORDS_PER_CHUNK=${{ github.event.inputs.words_per_chunk }}
          DOMAINS_COUNT=${{ github.event.inputs.domains_count }}

          MATRIX_SIZE=${MATRIX_SIZE:-4}
          NEXT_START=$((CHUNK_START + MATRIX_SIZE))
          NEXT_COUNTER=$((RUN_COUNTER + 1))

          echo "current_start=${CHUNK_START} matrix_size=${MATRIX_SIZE} next_start=${NEXT_START} total=${TOTAL} run_counter=${RUN_COUNTER}"

          if [ "$NEXT_START" -ge "$TOTAL" ]; then
            echo "All chunks processed (next_start >= total_chunks). Terminating recursion."
            exit 0
          fi

          if [ "$NEXT_COUNTER" -gt "$MAX_RUNS" ]; then
            echo "Reached max_runs ($MAX_RUNS). Terminating recursion."
            exit 0
          fi

          URL="https://api.github.com/repos/${{ github.repository }}/actions/workflows/${WORKFLOW_FILE}/dispatches"
          BODY=$(printf '%s' "{\"ref\":\"${{ github.ref_name }}\",\"inputs\":{\"chunk_start\":\"${NEXT_START}\",\"total_chunks\":\"${TOTAL}\",\"run_counter\":\"${NEXT_COUNTER}\",\"max_runs\":\"${MAX_RUNS}\",\"words_per_chunk\":\"${WORDS_PER_CHUNK}\",\"domains_count\":\"${DOMAINS_COUNT}\"}}")

          CURL_BASE=(-s -o /dev/null -w "%{http_code}" -X POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28")
          if [ -n "${PAT_TOKEN:-}" ]; then
            CURL_BASE+=(-H "Authorization: Bearer ${PAT_TOKEN}")
          else
            echo "PAT_TOKEN not provided; using GHCR_TOKEN (might be blocked by repo settings)"
            CURL_BASE+=(-H "Authorization: Bearer ${GHCR_TOKEN}")
          fi

          echo "Dispatching next run: start=${NEXT_START} counter=${NEXT_COUNTER}"
          for i in 1 2 3 4; do
            HTTP=$("${CURL_BASE[@]}" "$URL" -d "$BODY")
            if [ "$HTTP" -ge 200 ] && [ "$HTTP" -lt 300 ]; then
              echo "Dispatch succeeded (HTTP $HTTP)"
              exit 0
            fi
            echo "Dispatch attempt ${i} failed (HTTP ${HTTP}). Retrying..."
            sleep $((i * 2))
          done

          echo "Failed to dispatch next run after retries. Exiting with non-zero."
          exit 0
